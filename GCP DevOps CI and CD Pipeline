# üöÄ GCP DevOps CI/CD Pipeline

This repository demonstrates a complete **CI/CD pipeline on Google Cloud** for a Python Flask application using:

- **Cloud Build** for CI/CD automation
- **Docker** for containerization
- **Artifact Registry** for image storage
- **Google Kubernetes Engine (GKE)** for deployment
- **Kubernetes manifests** for workload definition

---

## üìÅ Project Structure

. ‚îú‚îÄ‚îÄ Dockerfile # Container setup for Flask app ‚îú‚îÄ‚îÄ requirements.txt # Python dependencies ‚îú‚îÄ‚îÄ main.py # Flask application entry point ‚îú‚îÄ‚îÄ cloudbuild.yaml # CI/CD pipeline configuration ‚îî‚îÄ‚îÄ gke-deploy.yml # Kubernetes Deployment & Service definitions


---

## üîß Technologies Used

- Python 3.8 + Flask
- Docker
- Google Cloud Build
- Artifact Registry
- GKE (Google Kubernetes Engine)
- Kubernetes (Deployment, Service)
- sed, bash

---

## üê≥ Dockerfile

Builds a minimal container for the Flask app:

```dockerfile
FROM python:3.8-slim-buster
WORKDIR /python-docker
COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt
COPY . .
CMD [ "python3", "-m" , "flask", "run", "--host=0.0.0.0"]

## Kubernetes Configuration (gke-deploy.yml)

Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gcp-devops-gke
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gcp
  template:
    metadata:
      labels:
        app: gcp
    spec:
      containers:
      - name: gcp-devops-gke
        image: IMAGE_TO_REPLACE
        ports:
        - containerPort: 5000
        env:
          - name: PORT
            value: "5000"

## Service

apiVersion: v1
kind: Service
metadata:
  name: gcp-devops-gke-service
  namespace: gcp-devops-prod
  labels:
    app.kubernetes.io/managed-by: gcp-cloud-build-deploy
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  selector:
    app: gcp
  type: LoadBalancer


‚öôÔ∏è Cloud Build Pipeline (cloudbuild.yaml)

steps:
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE}:${BUILD_ID}', '.']

- name: 'gcr.io/cloud-builders/docker'
  args: ['push','${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE}:${BUILD_ID}']

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args: ['-c', 'sed -i "s|IMAGE_TO_REPLACE|${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_IMAGE}:${BUILD_ID}|g" gke-deploy.yml']

- name: "gcr.io/cloud-builders/gke-deploy"
  args:
    - run
    - --filename=gke-deploy.yml
    - --location=us-central1-c
    - --cluster=gcp-devops
    - --namespace=gcp-devops-prod

substitutions:
  _LOCATION: 'us'
  _REPOSITORY: 'gcpdevops'
  _IMAGE: 'gcpdevopssantosh'

options:
  dynamicSubstitutions: true
  logging: GCS_ONLY
